from frozendict import frozendict
from binary_function import BinaryFunction
from project import Project
from pcode_engine import Engine
from engine_types import (
    Arg,
    BinaryOp,
    CallSite,
    ConditionalExpression,
    ConditionalSite,
    MemoryAccess,
    MemoryAccessType,
    Register,
    UnaryOp,
)


class TestEngineMIPSEL:
    def test_engine_mipsel_1(self):
        CODE = b"\xe0\xff\xbd'\x00\x00\x02<\x14\x00\xb0\xaf(\x0fB$\x1c\x00\xbf\xaf\x18\x00\xb1\xaf\t\xf8@\x00\x00\x00\x10<\xe0\x0e\x02\x92$\x00@\x14\x00\x00\x11<\xe1\x0e\"\x92\x01\x00B$\xff\x00B0\x02\x00C,\n\x00`\x14\xe1\x0e\"\xa2\x00\x00\x02<\x08\x0fB$\t\xf8@\x00\x00\x00\x00\x00\x03\x00@\x10\x01\x00\x03$\x00\x00\x02<0\x0fC\xa0\xe1\x0e \xa2\x00\x00\x02<\x18\x0fB$\t\xf8@\x00\xe0\x0e\x00\xa2\x00\x00\x02<<\x0fB$\t\xf8@\x00\x00\x00\x84\x8f\x00\x00\x02<8\x0fE\x8c\x1c\x00\xbf\x8f\x18\x00\xb1\x8f\x14\x00\xb0\x8f\x00\x00\x04<\x00\x00\x19<\xe4\x0e\x84$\xe2\x04\xa5$,\x0f9'\x08\x00 \x03 \x00\xbd'\x00\x00\x02<\x10\x0fB$\t\xf8@\x00\x00\x00\x00\x00\x04\x00@\x14\x00\x00\x02<\x00\x00\x02<0\x0f@\xa0\x00\x00\x02<\x87\x02\x00\x08\xe1\x0e@\xa0"
        ADDR = 0x000009B4

        project = Project("MIPS:LE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)
        engine = Engine(bin_func)

        expected_conditional_sites = {
            ConditionalSite(0x9D8, BinaryOp(UnaryOp(0xEE0, "*"), 0, "!="), 0xA6C, 0x9E0),
            ConditionalSite(
                0x9F0, BinaryOp(BinaryOp(BinaryOp(UnaryOp(0xEE1, "*"), 1, "+"), 0xFF, "&"), 2, "<"), 0xA1C, 0x9F8
            ),
            ConditionalSite(0xA7C, BinaryOp(CallSite(0xA74, 0xF10, frozendict()), 0, "!="), 0xA90, 0xA84),
            ConditionalSite(0xA08, BinaryOp(CallSite(0xA00, 0xF08, frozendict()), 0, "=="), 0xA18, 0xA10),
        }
        assert expected_conditional_sites == set(engine.conditional_sites)

        expected_callsites = {
            CallSite(0x9CC, 0xF28, frozendict()),
            CallSite(0xA74, 0xF10, frozendict()),
            CallSite(0xA00, 0xF08, frozendict()),
            CallSite(0xA24, 0xF18, frozendict()),
            CallSite(
                0xA34,
                0xF3C,
                frozendict({0: MemoryAccess(0xA34, Register(112, 0xA34, bin_func), 0, MemoryAccessType.LOAD)}),
            ),
            CallSite(0xA64, 0xF2C, frozendict({0: 0xEE4, 1: BinaryOp(UnaryOp(0xF38, "*"), 1250, "+")})),
        }

        assert expected_callsites == set(engine.callsites)


class TestEngineMIPSBE:
    # sshd binary `sshd_hostkey_sign` function
    def test_different_states_merged_into_conditional_expression(self):
        CODE = b"<\x1c\x00_'\xbd\xff\xc8'\x9c'\xe0\xaf\xb0\x000\x00\xc0@!\xaf\xbf\x004\x00\xe0\x80!\xaf\xbc\x00 <\t\x00_\x8f\xa3\x00H\x10\x80\x00\x14\x8f\xa2\x00L\x8d%\x90<'\xa6\x00(\x10\xa0\x00\x05\xaf\xa2\x00\x10\x01\x00(!\x8f\x99\x83P\x08\x10\x0f\xb6\x00`8!\x8f\x99\x83T\x01\x00(!\x00`8!\x03 \xf8\t\x00\x00\x00\x00\x00\x02\x17\xc2\x10@\x00\x16\x8f\xbc\x00 <\x04\x00W\x08\x10\x0f\xcc$\x84;@\x8d$\x90<P\x80\x00\x14\xaf\xa2\x00\x14\x8f\x99\x83P\x00\xa0 !\x00\xc0(!\xaf\xa2\x00\x10'\xa6\x00(\x03 \xf8\t\x00`8!\x04A\x00\x07\x8f\xbc\x00 <\x04\x00W$\x84;T<\x05\x00W\x8f\x99\x80\xe4\x03 \xf8\t$\xa5P\xdc\x12\x00\x00\x18\x8f\xa2\x00(\x08\x10\x0f\xe9\xae\x02\x00\x00<\x04\x00_\xaf\xa3\x00\x10\x8f\x82\x83X\x8f\x99\x83\\\x8c\x84\x90D\x8cB\x00\x00\x03 \xf8\t\xaf\xa2\x00\x18\x10@\x00\x0c\x8f\xbc\x00 \x8f\x99\x80\xb4\x03 \xf8\t\x00@ !<\x04\x00W\x8f\xbc\x00 <\x05\x00W$\x84;l$\xa5P\xdc\x8f\x99\x80\xe4\x03 \xf8\t\x00@0!\x8f\xbf\x004\x00\x00\x10!\x8f\xb0\x000\x03\xe0\x00\x08'\xbd\x008"
        ADDR = 0x00403E7C

        project = Project("MIPS:BE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)
        engine = Engine(bin_func)

        expected_result = ConditionalExpression(
            engine.addr_to_conditional_site[0x00403EAC],
            UnaryOp(0x5EAB30, "*"),
            UnaryOp(0x5EAB34, "*"),
        )

        assert engine.instructions_state[0x00403ED8].regs[project.context.registers["t9"].offset] == expected_result

    def test_callsite_argument_is_arg(self):
        # sshd binary `RAND_add` function
        CODE = b"'\xbd\xff\xd0\xaf\xa4\x00\x18\xaf\xa5\x00\x1c\xaf\xa6\x00 \xaf\xa7\x00$\xaf\xbf\x00,\x0c\x121\x1b\x00\x00\x00\x00\x8f\xa4\x00\x18\x8f\xa5\x00\x1c\x8f\xa6\x00 \x10@\x00\x06\x8f\xa7\x00$\x8cY\x00\x0c\x13 \x00\x03\x8f\xbf\x00,\x03 \x00\x08'\xbd\x000\x8f\xbf\x00,\x03\xe0\x00\x08'\xbd\x000"
        ADDR = 0x0048C610

        project = Project("MIPS:BE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)
        engine = Engine(bin_func)

        assert engine.callsites[1].args == frozendict({0: Arg(0), 1: Arg(1), 2: Arg(2), 3: Arg(3)})

    def test_load_memory_access_sanity(self):
        # sshd binary `fileno` function
        CODE = b"<\x1c\x00\t'\x9c&@\x03\x99\xe0!'\xbd\xff\xd8\xaf\xb1\x00\x1c\xaf\xbc\x00\x10\xaf\xb0\x00\x18\xaf\xbf\x00$\xaf\xb2\x00 \x8c\x91\x008\x16 \x00\x19\x00\x80\x80!|\x03\xe8;\x8c\x82\x00D$r\x8b\xa0\x10R\x00\x11$\x84\x00<$\x02\x00\x01\xc2\x05\x00<\x14\xb1\x00\x06\x00\x00\x18!\x00@\x18!\xe2\x03\x00<\x10`\xff\xfa\x00\x00\x00\x00\x00\x00\x00\x0fT`\x00\x06\xae\x12\x00D\x8f\x99\xa8\x08\x03 \xf8\t\x00\x00\x00\x00\x8f\xbc\x00\x10\xae\x12\x00D\x8e\x02\x00@$B\x00\x01\xae\x02\x00@\x8f\x99\xa8\xa8\x03 \xf8\t\x02\x00 !\x16 \x00\x15\x00@\x90!\x8e\x03\x00@$c\xff\xff\x14`\x00\x11\xae\x03\x00@\xae\x00\x00D&\x04\x00<\x00\x00\x00\x0f\xc2\x03\x00<\x02 \x10!\xe2\x02\x00<\x10@\xff\xfc\x00\x00\x00\x00(c\x00\x02\x14`\x00\x07\x8f\xbf\x00$$\x05\x00\x81$\x06\x00\x01\x00\x008!$\x02\x10\x8e\x00\x00\x00\x0c\x8f\xbf\x00$\x02@\x10!\x8f\xb2\x00 \x8f\xb1\x00\x1c\x8f\xb0\x00\x18\x03\xe0\x00\x08'\xbd\x00("
        ADDR = 0x005601A0

        project = Project("MIPS:BE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)
        engine = Engine(bin_func)

        assert MemoryAccess(0x005601C4, Arg(0), 0x38, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x005601D4, Arg(0), 0x44, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x005601E8, Arg(0), 0x3C, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x00560224, Arg(0), 0x40, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x00560244, Arg(0), 0x40, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x00560260, Arg(0), 0x3C, MemoryAccessType.LOAD) in engine.memory_accesses

    def test_load_memory_access_different_bases(self):
        # sshd binary `PKCS7_dataDecode` function
        CODE = b"<\x1c\x00_'\xbd\xff\xa0'\x9c'\xe0\xaf\xb0\x008\x00\x80\x80!\xaf\xbf\x00\\\xaf\xbe\x00X\xaf\xb7\x00T\xaf\xb6\x00P\xaf\xb5\x00L\xaf\xb4\x00H\xaf\xb3\x00D\xaf\xb2\x00@\xaf\xb1\x00<\xaf\xbc\x00\x18\xaf\xa5\x00d\xaf\xa0\x00(\xaf\xa0\x00$\x14\x80\x00\x07\xaf\xa0\x00 $\x02\x01\xb2$\x04\x00!$\x05\x00p\xaf\xa2\x00\x10\x08\x12\x8fL$\x06\x00\x8f\x8c\x82\x00\x14\x14@\x00\x0c\x8f\x99\x93`$\x02\x01\xb7$\x04\x00!$\x05\x00p$\x06\x00z\xaf\xa2\x00\x10<\x07\x00[\x8f\x99\x81\xec\x03 \xf8\t$\xe7\x94\x10\x08\x12\x91H\x00\x00\x00\x00\x00\xc0\xa0!\x8c\x84\x00\x10\x03 \xf8\t\x00\xe0\xf0!\x00@\x88!\x8f\xbc\x00\x18$\x02\x00\x17\x12\"\x00J\xae\x00\x00\x08$\x02\x00\x18\x12\"\x00#$\x02\x00\x16\x16\"\x00\\$\x02\x01\xe8\x8e\x02\x00\x14\x0c\x12\x8c\x8d\x8cD\x00\x14\x8f\xbc\x00\x18\x00@\x98!\x8f\x99\x93`\x03 \xf8\t\x8e\x04\x00\x10\x10Q\x00\t\x8f\xbc\x00\x18V`\x00\x10\x8e\x02\x00\x14$\x02\x01\xc9$\x04\x00!$\x05\x00p\xaf\xa2\x00\x10\x08\x12\x8f\xbf$\x06\x00\x9b\x8f\x99\x9a\xa0$\x05\x00\x02\x00\x000!\x00\x008!\x03 \xf8\t\x02\x00 !\x10@\xff\xf1\x8f\xbc\x00\x18\x8e\x02\x00\x14\x00\x00\xb0!\xaf\xa0\x000\x00\x00\xa8!\x08\x12\x8f\xc7\x8cR\x00\x04\x8e\x02\x00\x14\x8f\x99\x93`\x8cV\x00\x18\x8cR\x00\x04\x8cB\x00\x14\x8cS\x00\x08\x8cB\x00\x04\x8cD\x00\x00\x03 \xf8\t\xaf\xa2\x000\x8f\xbc\x00\x18\x8f\x99\x93d\x03 \xf8\t\x00@ !\x8f\xbc\x00\x18\x8f\x99\x98(\x03 \xf8\t\x00@ !\x8f\xbc\x00\x18\x14@\x003\x00@\xa8!$\x02\x01\xd7<\x07\x00[\x8f\x99\x81\xec$\x04\x00!\xaf\xa2\x00\x10$\x05\x00p$\x06\x00o$\xe7\x94\x10\x03 \xf8\t\x00\x00\x88!\x8f\xbc\x00\x18\x00\x00\x90!\x00\x00\xb8!\x08\x12\x91&\x00\x00\x80!\x8e\x02\x00\x14\x8f\x99\x93`\x8cV\x00\x04\x8cB\x00\x08\x8cC\x00\x04\x8cS\x00\x08\x8cd\x00\x00\x03 \xf8\t\xaf\xa3\x000\x8f\xbc\x00\x18\x8f\x99\x93d\x03 \xf8\t\x00@ !\x8f\xbc\x00\x18\x8f\x99\x98(\x03 \xf8\t\x00@ !\x00@\xa8!\x8f\xbc\x00\x18\x16\xa0\x01\x92$\x02\x01\xe3\x08\x12\x8f\x97<\x07\x00[$\x04\x00!$\x05\x00p$\x06\x00p\xaf\xa2\x00\x10<\x07\x00[\x8f\x99\x81\xec\x00\x00\x88!$\xe7\x94\x10\x03 \xf8\t\x00\x00\xa8!\x08\x12\x8f\xa0\x8f\xbc\x00\x18\x16`\x00\x08\x00\x00\x80!\x16\x80\x00\x06$\x02\x01\xee$\x04\x00!$\x05\x00p\xaf\xa2\x00\x10\x08\x12\x8f\xbf$\x06\x00z\x12@\x00O\x00\x00\x88!\x8f\x99\x81\xc4\x03 \xf8\t\x02@ !\x02\"\x10*\x10@\x00I\x8f\xbc\x00\x18\x8f\x99\x81\xc8\x02 (!\x03 \xf8\t\x02@ !\x8f\xbc\x00\x18\x8f\x99\x9a|\x03 \xf8\t\xaf\xa2\x004\x8f\xbc\x00\x18\x8f\x99\x8dl\x03 \xf8\t\x00@ !\x8f\xbc\x00\x18\x00@\xb8!\x14@\x00\r\x8f\xa5\x004$\x02\x01\xf7\x8f\x99\x81\xec<\x07\x00[$\x04\x00!$\x05\x00p\xaf\xa2\x00\x10$\x06\x00 $\xe7\x94\x10\x03 \xf8\t\x00\x00\x90!\x08\x12\x907\x8f\xbc\x00\x18\x8f\x99\x93`\x03 \xf8\t\x8c\xa4\x00\x00\x8f\xbc\x00\x18\x8f\x99\x93d\x03 \xf8\t\x00@ !\x8f\xbc\x00\x18\x8f\x99\x93h\x03 \xf8\t\x00@ !\x14@\x00\x0f\x8f\xbc\x00\x18$\x02\x01\xff\x8f\x99\x81\xec<\x07\x00[$\x04\x00!$\x05\x00p\xaf\xa2\x00\x10$\x06\x00m$\xe7\x94\x10\x03 \xf8\t\x00\x00\x88!\x00\x00\xa8!\x8f\xbc\x00\x18\x08\x12\x91&\x00\x00\x90!\x8f\x99\x8d\x9c$\x05\x00o\x00\x000!\x02\xe0 !\x03 \xf8\t\x00@8!\x12\x00\x00\x07\x8f\xbc\x00\x18\x8f\x99\x9a\x80\x02\xe0(!\x02\x00 !\x03 \xf8\t\x02\x00\xb8!\x8f\xbc\x00\x18&1\x00\x01\x08\x12\x8f\xd2\x02\xe0\x80!\x12\xa0\x00\xd5\x00\x00\x88!\x8f\x99\x9a\x8c\x03 \xf8\t\x00\x00\x00\x00\x8f\xbc\x00\x18\x8f\x99\x8dl\x03 \xf8\t\x00@ !\x8f\xbc\x00\x18\x14@\x00\x0f\x00@\x90!$\x02\x02\x17\x8f\x99\x81\xec<\x07\x00[$\x04\x00!$\x05\x00p\xaf\xa2\x00\x10$\x06\x00 $\xe7\x94\x10\x03 \xf8\t\x00\x00\xb8!\x8f\xbc\x00\x18\x00\x00\x88!\x08\x12\x91&\x00\x00\xa8!\x17\xc0\x00\x13\x00\x00\x88!'\xb7\x00$\x08\x12\x90o'\xbe\x00 \x8f\x99\x81\xc8\x02\xc0 !\x03 \xf8\t\x02 (!\x8f\xbc\x00\x18\x00@\xb8!\x8cC\x00\x04\x8f\xc2\x00\x00\x8f\x99\x82\x18\x8cd\x00\x00\x03 \xf8\t\x8cE\x00\x0c\x10@\x00\n\x8f\xbc\x00\x18&1\x00\x01\x8f\x99\x81\xc4\x03 \xf8\t\x02\xc0 !\x02\"\x10*\x14@\xff\xec\x8f\xbc\x00\x18\x08\x12\x91\x1a$\x02\x02.\x8f\xc3\x00\x00\x8e\xe2\x00\x04\x8f\x99\x98\x98\x8cd\x00\x04\x03 \xf8\t\x8cE\x00\x04\x14@\xff\xf0\x8f\xbc\x00\x18\x08\x12\x90w\x8f\xa7\x00d\x8f\x99\x81\xc8\x02\xc0 !\x03 \xf8\t\x02 (!\x02\xe0 !\x8f\xa7\x00d\x03\xc0(!\x0c\x12\x8b`\x00@0!\x04@\x00\xb9\x8f\xbc\x00\x18\x8f\x99\x99T\x03 \xf8\t&1\x00\x01\x8f\xbc\x00\x18\x8f\x99\x81\xc4\x03 \xf8\t\x02\xc0 !\x02\"\x10*\x14@\xff\xec\x8f\xbc\x00\x18\x08\x12\x90\x82\x8f\x99\x8d\x9c'\xa4\x00$'\xa5\x00 \x0c\x12\x8b`\x02\xe00!\x04@\x00\xa7\x8f\xbc\x00\x18\x8f\x99\x99T\x03 \xf8\t\x00\x00\x00\x00\x8f\xbc\x00\x18\x8f\x99\x8d\x9c$\x05\x00\x81\x00\x000!\xaf\xa0\x00('\xa7\x00(\x03 \xf8\t\x02@ !\x00\x000!\x8f\xbc\x00\x18\x00\x008!\x8f\xa4\x00(\x02\xa0(!\xaf\xa0\x00\x10\x8f\x99\x98@\x03 \xf8\t\xaf\xa0\x00\x14\x18@\x00\x91\x8f\xbc\x00\x18\x8f\xa3\x000\x8f\x99\x98p\x8f\xa4\x00(\x03 \xf8\t\x8ce\x00\x04\x04@\x00\x8a\x8f\xbc\x00\x18\x8f\x99\x8e\\\x03 \xf8\t\x8f\xa4\x00(<\x05\x00[\x8f\xbc\x00\x18$\x06\x02O$\xa5\x94\x10\x00@ !\x8f\x99\x82\xd4\x03 \xf8\t\x00@\x88!\x8f\xbc\x00\x18\x10@\x00~\x00@\xa8!\x8f\x99\x9a\x90\x00@(!\x03 \xf8\t\x8f\xa4\x00(\x18@\x00x\x8f\xbc\x00\x18\x8f\xa2\x00$\x14@\x00\x04\x8f\x99\x8e\\\xaf\xb5\x00$\x00\x00\xa8!\xaf\xb1\x00 \x8f\xa4\x00(\x03 \xf8\t\x8f\xb6\x00 \x12\xc2\x00\x13\x8f\xbc\x00\x18\x8f\x99\x8e`\x8f\xa4\x00(\x03 \xf8\t\x8f\xa5\x00 \x14@\x00\r\x8f\xbc\x00\x18\x8f\x99\x92D\x8f\xa4\x00$\x03 \xf8\t\x8f\xa5\x00 \x8f\xbc\x00\x18\x8f\x99\x82\xf4\x03 \xf8\t\x8f\xa4\x00$\x8f\xbc\x00\x18\xaf\xb5\x00$\x00\x00\xa8!\xaf\xb1\x00 \x8f\x99\x99T\x03 \xf8\t\x00\x00\x00\x00\x00\x00(!\x8f\xbc\x00\x18\x00\x000!\x8f\xa4\x00(\x8f\xa7\x00$\xaf\xa0\x00\x10\x8f\x99\x98@\x03 \xf8\t\xaf\xa0\x00\x14\x18@\x00M\x8f\xbc\x00\x18\x8f\xa4\x00$\x10\x80\x00\t\x8f\x99\x92D\x03 \xf8\t\x8f\xa5\x00 \x8f\xbc\x00\x18\x8f\x99\x82\xf4\x03 \xf8\t\x8f\xa4\x00$\x8f\xbc\x00\x18\xaf\xa0\x00$\x12\xa0\x00\t\x8f\x99\x92D\x02\xa0 !\x03 \xf8\t\x02 (!\x8f\xbc\x00\x18\x8f\x99\x82\xf4\x03 \xf8\t\x02\xa0 !\x8f\xbc\x00\x18\x12\x00\x00\x06\x8f\x99\x9a\x80\x02\x00 !\x03 \xf8\t\x02@(!\x08\x12\x90\xf6\x8f\xbc\x00\x18\x02@\x80!\x16\x80\x00\x1b\x8f\x99\x9a\x80\x8ee\x00\x00\x18\xa0\x00\x06\x8f\x99\x9a\xa8\x03 \xf8\t\x8ed\x00\x08\x8f\xbc\x00\x18\x08\x12\x91\x10\x00@\xa0!\x8f\x99\x8dh\x03 \xf8\t\x00\x00\x00\x00\x8f\xbc\x00\x18\x8f\x99\x8dl\x03 \xf8\t\x00@ !$\x05\x00\x82\x8f\xbc\x00\x18\x00\x000!\x00\x008!\x00@ !\x8f\x99\x8d\x9c\x03 \xf8\t\x00@\xa0!\x8f\xbc\x00\x18\x12\x80\x00\x06\x8f\x99\x9a\x80\x02\x00 !\x03 \xf8\t\x02\x80(!\x08\x12\x91P\x02\x00\x10!\x00\x00\xa8!\x08\x12\x91%\x00\x00\x90!\x8f\x99\x81\xec<\x07\x00[$\x04\x00!$\x05\x00p\xaf\xa2\x00\x10$\x06\x00s\x03 \xf8\t$\xe7\x94\x10\x8f\xbc\x00\x18\x00\x00\x88!\x00\x00\xa8!\x00\x00\xb8!\x8f\xa4\x00$\x10\x80\x00\x08\x8f\x99\x92D\x03 \xf8\t\x8f\xa5\x00 \x8f\xbc\x00\x18\x8f\x99\x82\xf4\x03 \xf8\t\x8f\xa4\x00$\x8f\xbc\x00\x18\x12\xa0\x00\t\x8f\x99\x92D\x02\xa0 !\x03 \xf8\t\x02 (!\x8f\xbc\x00\x18\x8f\x99\x82\xf4\x03 \xf8\t\x02\xa0 !\x8f\xbc\x00\x18\x12\x00\x00\x04\x8f\x99\x9a\xac\x03 \xf8\t\x02\x00 !\x8f\xbc\x00\x18\x12\xe0\x00\x04\x8f\x99\x9a\xac\x03 \xf8\t\x02\xe0 !\x8f\xbc\x00\x18\x12@\x00\x03\x8f\x99\x9a\xac\x03 \xf8\t\x02@ !\x08\x12\x91P\x00\x00\x10!\x16`\xfe\xd7\x00\x00\x80!\x16\x80\xfe\xd5\x02`\x80!\x08\x12\x8f\xcb$\x02\x01\xee\x8f\xbf\x00\\\x8f\xbe\x00X\x8f\xb7\x00T\x8f\xb6\x00P\x8f\xb5\x00L\x8f\xb4\x00H\x8f\xb3\x00D\x8f\xb2\x00@\x8f\xb1\x00<\x8f\xb0\x008\x03\xe0\x00\x08'\xbd\x00`"
        ADDR = 0x004A3CA8

        project = Project("MIPS:BE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)
        engine = Engine(bin_func)

        assert MemoryAccess(0x004A3D10, Arg(0), 0x14, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x004A3D4C, Arg(0), 0x10, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x004A3E90, Arg(0), 0x14, MemoryAccessType.LOAD) in engine.memory_accesses

        base1 = MemoryAccess(0x004A3E90, Arg(0), 0x14, MemoryAccessType.LOAD)
        assert MemoryAccess(0x004A3E98, base1, 0x4, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x004A3E9C, base1, 0x8, MemoryAccessType.LOAD) in engine.memory_accesses

        base2 = MemoryAccess(0x004A3E9C, base1, 0x8, MemoryAccessType.LOAD)
        assert MemoryAccess(0x004A3EA0, base2, 0x4, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x004A3EA4, base2, 0x8, MemoryAccessType.LOAD) in engine.memory_accesses

        base3 = MemoryAccess(0x004A3EA0, base2, 0x4, MemoryAccessType.LOAD)
        assert MemoryAccess(0x004A3EA8, base3, 0x0, MemoryAccessType.LOAD) in engine.memory_accesses

        base4 = MemoryAccess(0x004A3D80, Arg(0), 0x14, MemoryAccessType.LOAD)
        assert base4 in engine.memory_accesses
        assert MemoryAccess(0x004A3D84, base4, 0x14, MemoryAccessType.LOAD) in engine.memory_accesses

        assert MemoryAccess(0x004A3D98, Arg(0), 0x10, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x004A3DE8, Arg(0), 0x14, MemoryAccessType.LOAD) in engine.memory_accesses
        assert MemoryAccess(0x004A3DA8, Arg(0), 0x14, MemoryAccessType.LOAD) in engine.memory_accesses

        # TODO: When Loops are good add callsite tests
