from binary_function import BinaryFunction
from cfg import CodeFlowGraph
from project import Project
from tests.helpers import verify_blocks_dict, verify_cfg_equal


class TestBinaryFunctionMIPSEL:
    def test_binary_function_mipsel_1(self):
        CODE = b"\xe0\xff\xbd'\x00\x00\x02<\x14\x00\xb0\xaf(\x0fB$\x1c\x00\xbf\xaf\x18\x00\xb1\xaf\t\xf8@\x00\x00\x00\x10<\xe0\x0e\x02\x92$\x00@\x14\x00\x00\x11<\xe1\x0e\"\x92\x01\x00B$\xff\x00B0\x02\x00C,\n\x00`\x14\xe1\x0e\"\xa2\x00\x00\x02<\x08\x0fB$\t\xf8@\x00\x00\x00\x00\x00\x03\x00@\x10\x01\x00\x03$\x00\x00\x02<0\x0fC\xa0\xe1\x0e \xa2\x00\x00\x02<\x18\x0fB$\t\xf8@\x00\xe0\x0e\x00\xa2\x00\x00\x02<<\x0fB$\t\xf8@\x00\x00\x00\x84\x8f\x00\x00\x02<8\x0fE\x8c\x1c\x00\xbf\x8f\x18\x00\xb1\x8f\x14\x00\xb0\x8f\x00\x00\x04<\x00\x00\x19<\xe4\x0e\x84$\xe2\x04\xa5$,\x0f9'\x08\x00 \x03 \x00\xbd'\x00\x00\x02<\x10\x0fB$\t\xf8@\x00\x00\x00\x00\x00\x04\x00@\x14\x00\x00\x02<\x00\x00\x02<0\x0f@\xa0\x00\x00\x02<\x87\x02\x00\x08\xe1\x0e@\xa0"
        ADDR = 0x000009B4

        project = Project("MIPS:LE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)

        cfg = CodeFlowGraph()
        cfg.add_edges(0x000009B4, [0x000009E0, 0x00000A6C])
        cfg.add_edges(0x000009E0, [0x000009F8, 0x00000A1C])
        cfg.add_edges(0x000009F8, [0x00000A10, 0x00000A18])
        cfg.add_edges(0x00000A10, [0x00000A18])
        cfg.add_edges(0x00000A18, [0x00000A1C])
        cfg.add_edges(0x00000A6C, [0x00000A84, 0x00000A90])
        cfg.add_edges(0x00000A84, [0x00000A90])
        cfg.add_edges(0x00000A90, [0x00000A1C])

        verify_cfg_equal(cfg, bin_func.code_flow_grpah)

        verify_blocks_dict(bin_func)

    def test_binary_function_mipsel_2(self):
        CODE = b"\x08\x00\x82\x94\n\x00\x86\x94\x00\x00\x03<\xc8\x0ec\x8c\x00\x00\x85\x8c\x00\x14\x02\x00\x04\x00\x84\x8c%\x10F\x00!\x10C\x007\x9e\x03<# \x85\x00\xb9yc$!\x18\xa3\x00# \x82\x00B+\x02\x00& \x85\x00#\x18b\x00\x00*\x04\x00#\x18d\x00&\x18\xa3\x00#\x10D\x00B+\x03\x00#\x10C\x00&\x10\xa2\x00# \x83\x00\x02+\x02\x00# \x82\x00& \xa4\x00#\x18b\x00\x00,\x04\x00#\x18d\x00&\x18\xa3\x00#\x10D\x00B)\x03\x00#\x10C\x00&\x10\xa2\x00# \x83\x00\xc2(\x02\x00# \x82\x00& \xa4\x00#\x18b\x00\x80*\x04\x00#\x18d\x00&\x18\xa3\x00# D\x00\x00\x00\x02<# \x83\x00\xd0\x0eE\x90\xc2\x1b\x03\x00&\x18d\x00\x1f\x00c0\x03\x00\xa3\x10!\x10\x00\x00\x08\x00\xe0\x03\x00\x00\x00\x00\x00\x00\x02<H\x0eB$\x80(\x05\x00!(\xa2\x00\x00\x00\xa3\x8c\x01\x00\x02$\xff\xffc$\x08\x00\xe0\x03\x00\x00\xa3\xac"
        ADDR = 0x4

        project = Project("MIPS:LE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)

        cfg = CodeFlowGraph()
        cfg.add_edges(0x00000004, [0x000000D8, 0x000000E0])
        verify_cfg_equal(cfg, bin_func.code_flow_grpah)

        verify_blocks_dict(bin_func)

    def test_binary_function_mipsel_3(self):
        CODE = b'\xa8\x00\x82\x8c\x00\x81\x064\x0c\x00D\x94\xa08\x04|\xff\xff\xe70\x03\x00\xe6\x14\x0c\x00C$\x10\x00D\x94\x10\x00C$\xa0 \x04|d\x88\x024\xff\xff\x840\x1e\x00\x82\x14\x00\x08\x06$\x08\x00f\x94!\x00\x04$\xa00\x06|\xff\xff\xc60!\x10\x00\x00\x19\x00\xc4\x14\x08\x00c$\x0e\x00b\x8c\xa0\x10\x02|\x02\x14"\x00\x04\x00\xa2\xac\x12\x00b\x8c\xa0\x10\x02|\x02\x14"\x00\x00\x00\xa2\xac\x0b\x00d\x90\x06\x00\x02$\x03\x00\x82\x10\x11\x00\x06$\x0b\x00\x86\x14!\x10\x00\x00\x16\x00b\x94\xa0\x10\x02|\x08\x00\xa2\xa4\x18\x00d\x94\x0b\x00b$\xa0\x18\x04|\x08\x00\xe0\x03\n\x00\xa3\xa4\xe9\xff\x86\x10!\x10\x00\x00\x08\x00\xe0\x03\x00\x00\x00\x00'
        ADDR = 0x104

        project = Project("MIPS:LE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)

        cfg = CodeFlowGraph()
        cfg.add_edges(0x00000104, [0x00000120, 0x00000128])
        cfg.add_edges(0x00000120, [0x00000128])
        cfg.add_edges(0x00000128, [0x0000013C, 0x000001B0])
        cfg.add_edges(0x0000013C, [0x00000158, 0x000001B8])
        cfg.add_edges(0x000001B0, [0x000001B8, 0x00000158])
        cfg.add_edges(0x00000158, [0x00000188, 0x00000190])
        cfg.add_edges(0x00000188, [0x00000190, 0x000001B8])
        verify_cfg_equal(cfg, bin_func.code_flow_grpah)

        verify_blocks_dict(bin_func)

    def test_binary_function_mipsel_4(self):
        # TODO: Add edges cases tests, move this there?
        CODE = b"\xe8\xff\xbd'\x00\x00\x04<\x00\x00\x02<\x14\x00\xbf\xaf\x10\x00\xb0\xaf\x00\x0fB$\t\xf8@\x00\xb0\x0c\x84$\x00\x00\x10<\x00\x00\x02<\xe4\x0eB$\xb4\t\x10&! @\x00\x10\x00P\xac\x14\x00@\xac\x00\x00\x02<!(\x00\x00@\x0fB$\t\xf8@\x00!0\x00\x00\t\xf8\x00\x02! \x00\x00\x00\x00\x03<\xec\x08c$\x00\x00\x02<\x14\x0fC\xac\x00\x00\x03<$\tc$\x00\x00\x02<D\x0fC\xac\x00\x00\x02<x\x08B$\t\xf8@\x00\x00\x00\x00\x00\x14\x00\xbf\x8f!\x10\x00\x00\x10\x00\xb0\x8f\x08\x00\xe0\x03\x18\x00\xbd'"
        ADDR = 0x00000B10

        project = Project("MIPS:LE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)

        cfg = CodeFlowGraph()
        cfg.add_block(0x00000B10)

        verify_cfg_equal(cfg, bin_func.code_flow_grpah)
        verify_blocks_dict(bin_func)


class TestBinaryFunctionMIPSBE:
    def test_binary_function_mipsbe_1(self):
        CODE = b"<\x1c\x00_'\xbd\xff\xc8'\x9c'\xe0\xaf\xb0\x000\x00\xc0@!\xaf\xbf\x004\x00\xe0\x80!\xaf\xbc\x00 <\t\x00_\x8f\xa3\x00H\x10\x80\x00\x14\x8f\xa2\x00L\x8d%\x90<'\xa6\x00(\x10\xa0\x00\x05\xaf\xa2\x00\x10\x01\x00(!\x8f\x99\x83P\x08\x10\x0f\xb6\x00`8!\x8f\x99\x83T\x01\x00(!\x00`8!\x03 \xf8\t\x00\x00\x00\x00\x00\x02\x17\xc2\x10@\x00\x16\x8f\xbc\x00 <\x04\x00W\x08\x10\x0f\xcc$\x84;@\x8d$\x90<P\x80\x00\x14\xaf\xa2\x00\x14\x8f\x99\x83P\x00\xa0 !\x00\xc0(!\xaf\xa2\x00\x10'\xa6\x00(\x03 \xf8\t\x00`8!\x04A\x00\x07\x8f\xbc\x00 <\x04\x00W$\x84;T<\x05\x00W\x8f\x99\x80\xe4\x03 \xf8\t$\xa5P\xdc\x12\x00\x00\x18\x8f\xa2\x00(\x08\x10\x0f\xe9\xae\x02\x00\x00<\x04\x00_\xaf\xa3\x00\x10\x8f\x82\x83X\x8f\x99\x83\\\x8c\x84\x90D\x8cB\x00\x00\x03 \xf8\t\xaf\xa2\x00\x18\x10@\x00\x0c\x8f\xbc\x00 \x8f\x99\x80\xb4\x03 \xf8\t\x00@ !<\x04\x00W\x8f\xbc\x00 <\x05\x00W$\x84;l$\xa5P\xdc\x8f\x99\x80\xe4\x03 \xf8\t\x00@0!\x8f\xbf\x004\x00\x00\x10!\x8f\xb0\x000\x03\xe0\x00\x08'\xbd\x008"
        ADDR = 0x00403E7C

        project = Project("MIPS:BE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)

        cfg = CodeFlowGraph()
        cfg.add_edges(0x00403E7C, [0x00403EAC, 0x00403EF8])
        cfg.add_edges(0x00403EAC, [0x00403EBC, 0x00403ECC])
        cfg.add_edges(0x00403EBC, [0x00403ED8])
        cfg.add_edges(0x00403ECC, [0x00403ED8])
        cfg.add_edges(0x00403ED8, [0x00403EEC, 0x00403F40])
        cfg.add_edges(0x00403EEC, [0x00403F30])
        cfg.add_edges(0x00403F30, [0x00403F40])
        cfg.add_edges(0x00403F40, [0x00403F48, 0x00403FA4])
        cfg.add_edges(0x00403F48, [0x00403FA4])
        cfg.add_edges(0x00403EF8, [0x00403F04, 0x00403F50])
        cfg.add_edges(0x00403F04, [0x00403F28, 0x00403F40])
        cfg.add_edges(0x00403F28, [0x00403F30])
        cfg.add_edges(0x00403F50, [0x00403F78, 0x00403FA4])
        cfg.add_edges(0x00403F78, [0x00403FA4])

        verify_cfg_equal(cfg, bin_func.code_flow_grpah)
        verify_blocks_dict(bin_func)

    def test_call_outside_func_is_not_branch(self):
        # sshd binary `get_hostkey_public_by_type` function
        CODE = b"\x08\x10\x0fL\x00\x000!"
        ADDR = 0x00403E6C

        project = Project("MIPS:BE:32:default")
        bin_func = BinaryFunction(ADDR, CODE, project)

        cfg = CodeFlowGraph()
        cfg.add_block(0x00403E6C)

        verify_cfg_equal(cfg, bin_func.code_flow_grpah)
        verify_blocks_dict(bin_func)

        assert len(bin_func.blocks_dict_start_address.keys()) == 1
